// Bootstrap Start
@261
D=A
@SP
M=D
@Sys.init
0;JMP
// Bootstrap End
// function: Math.init
// program flow command
(Math.init)
// init LCL[0] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@16
D=A
@SP
M=M+1
A=M-1
M=D
// call Array.new 1 
@CallReturn.0
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0; JMP
(CallReturn.0)
// pop static
@Math.1
D=M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@16
D=A
@SP
M=M+1
A=M-1
M=D
// call Array.new 1 
@CallReturn.1
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0; JMP
(CallReturn.1)
// pop static
@Math.0
D=M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push static
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(WHILE_EXP0)
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@15
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.0
D;JLT
@SP
A=M-1
M=0
@END.0
0;JMP
(TRUE.0)
@SP
A=M-1
M=-1
(END.0)
// neg
@SP
A=M-1
M=!M
// program flow command
@SP
AM=M-1
D=M
@WHILE_END0
D;JNE
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push static
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push static
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push static
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@WHILE_EXP0
0; JMP
// program flow command
(WHILE_END0)
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Math.abs
// program flow command
(Math.abs)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.1
D;JLT
@SP
A=M-1
M=0
@END.1
0;JMP
(TRUE.1)
@SP
A=M-1
M=-1
(END.1)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// program flow command
@IF_FALSE0
0; JMP
// program flow command
(IF_TRUE0)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=-M// pop address
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE0)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Math.multiply
// program flow command
(Math.multiply)
// init LCL[0] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[1] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[2] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[3] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[4] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.2
D;JLT
@SP
A=M-1
M=0
@END.2
0;JMP
(TRUE.2)
@SP
A=M-1
M=-1
(END.2)
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.3
D;JGT
@SP
A=M-1
M=0
@END.3
0;JMP
(TRUE.3)
@SP
A=M-1
M=-1
(END.3)
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.4
D;JGT
@SP
A=M-1
M=0
@END.4
0;JMP
(TRUE.4)
@SP
A=M-1
M=-1
(END.4)
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.5
D;JLT
@SP
A=M-1
M=0
@END.5
0;JMP
(TRUE.5)
@SP
A=M-1
M=-1
(END.5)
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// pop address
@LCL
D=M
@4
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Math.abs 1 
@CallReturn.2
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0; JMP
(CallReturn.2)
// pop address
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Math.abs 1 
@CallReturn.3
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0; JMP
(CallReturn.3)
// pop address
@ARG
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.6
D;JLT
@SP
A=M-1
M=0
@END.6
0;JMP
(TRUE.6)
@SP
A=M-1
M=-1
(END.6)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// program flow command
@IF_FALSE0
0; JMP
// program flow command
(IF_TRUE0)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@ARG
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE0)
// program flow command
(WHILE_EXP0)
// push from address
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.7
D;JLT
@SP
A=M-1
M=0
@END.7
0;JMP
(TRUE.7)
@SP
A=M-1
M=-1
(END.7)
// neg
@SP
A=M-1
M=!M
// program flow command
@SP
AM=M-1
D=M
@WHILE_END0
D;JNE
// push from address
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push static
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.8
D;JGT
@SP
A=M-1
M=0
@END.8
0;JMP
(TRUE.8)
@SP
A=M-1
M=-1
(END.8)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE1
D;JNE
// program flow command
@IF_FALSE1
0; JMP
// program flow command
(IF_TRUE1)
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push static
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@LCL
D=M
@2
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE1)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@LCL
D=M
@3
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@WHILE_EXP0
0; JMP
// program flow command
(WHILE_END0)
// push from address
@LCL
D=M
@4
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE2
D;JNE
// program flow command
@IF_FALSE2
0; JMP
// program flow command
(IF_TRUE2)
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=-M// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE2)
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Math.divide
// program flow command
(Math.divide)
// init LCL[0] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[1] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[2] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[3] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.9
D;JEQ
@SP
A=M-1
M=0
@END.9
0;JMP
(TRUE.9)
@SP
A=M-1
M=-1
(END.9)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// program flow command
@IF_FALSE0
0; JMP
// program flow command
(IF_TRUE0)
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// call Sys.error 1 
@CallReturn.4
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0; JMP
(CallReturn.4)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE0)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.10
D;JLT
@SP
A=M-1
M=0
@END.10
0;JMP
(TRUE.10)
@SP
A=M-1
M=-1
(END.10)
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.11
D;JGT
@SP
A=M-1
M=0
@END.11
0;JMP
(TRUE.11)
@SP
A=M-1
M=-1
(END.11)
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.12
D;JGT
@SP
A=M-1
M=0
@END.12
0;JMP
(TRUE.12)
@SP
A=M-1
M=-1
(END.12)
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.13
D;JLT
@SP
A=M-1
M=0
@END.13
0;JMP
(TRUE.13)
@SP
A=M-1
M=-1
(END.13)
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// pop address
@LCL
D=M
@2
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push static
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Math.abs 1 
@CallReturn.5
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0; JMP
(CallReturn.5)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Math.abs 1 
@CallReturn.6
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0; JMP
(CallReturn.6)
// pop address
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(WHILE_EXP0)
// push from address
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=!M
// neg
@SP
A=M-1
M=!M
// program flow command
@SP
AM=M-1
D=M
@WHILE_END0
D;JNE
// push constant
@32767
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push static
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push static
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.14
D;JLT
@SP
A=M-1
M=0
@END.14
0;JMP
(TRUE.14)
@SP
A=M-1
M=-1
(END.14)
// pop address
@LCL
D=M
@3
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=!M
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE1
D;JNE
// program flow command
@IF_FALSE1
0; JMP
// program flow command
(IF_TRUE1)
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push static
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push static
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push static
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push static
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.15
D;JGT
@SP
A=M-1
M=0
@END.15
0;JMP
(TRUE.15)
@SP
A=M-1
M=-1
(END.15)
// pop address
@LCL
D=M
@3
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=!M
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE2
D;JNE
// program flow command
@IF_FALSE2
0; JMP
// program flow command
(IF_TRUE2)
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE2)
// program flow command
(IF_FALSE1)
// program flow command
@WHILE_EXP0
0; JMP
// program flow command
(WHILE_END0)
// program flow command
(WHILE_EXP1)
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=-M//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.16
D;JGT
@SP
A=M-1
M=0
@END.16
0;JMP
(TRUE.16)
@SP
A=M-1
M=-1
(END.16)
// neg
@SP
A=M-1
M=!M
// program flow command
@SP
AM=M-1
D=M
@WHILE_END1
D;JNE
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push static
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.17
D;JGT
@SP
A=M-1
M=0
@END.17
0;JMP
(TRUE.17)
@SP
A=M-1
M=-1
(END.17)
// neg
@SP
A=M-1
M=!M
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE3
D;JNE
// program flow command
@IF_FALSE3
0; JMP
// program flow command
(IF_TRUE3)
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push static
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push static
@Math.1
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop address
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE3)
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@WHILE_EXP1
0; JMP
// program flow command
(WHILE_END1)
// push from address
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE4
D;JNE
// program flow command
@IF_FALSE4
0; JMP
// program flow command
(IF_TRUE4)
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=-M// pop address
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE4)
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Math.sqrt
// program flow command
(Math.sqrt)
// init LCL[0] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[1] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[2] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[3] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.18
D;JLT
@SP
A=M-1
M=0
@END.18
0;JMP
(TRUE.18)
@SP
A=M-1
M=-1
(END.18)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// program flow command
@IF_FALSE0
0; JMP
// program flow command
(IF_TRUE0)
// push constant
@4
D=A
@SP
M=M+1
A=M-1
M=D
// call Sys.error 1 
@CallReturn.7
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0; JMP
(CallReturn.7)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE0)
// push constant
@7
D=A
@SP
M=M+1
A=M-1
M=D
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(WHILE_EXP0)
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=-M//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.19
D;JGT
@SP
A=M-1
M=0
@END.19
0;JMP
(TRUE.19)
@SP
A=M-1
M=-1
(END.19)
// neg
@SP
A=M-1
M=!M
// program flow command
@SP
AM=M-1
D=M
@WHILE_END0
D;JNE
// push from address
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push static
@Math.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Math.multiply 2 
@CallReturn.8
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0; JMP
(CallReturn.8)
// pop address
@LCL
D=M
@2
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.20
D;JGT
@SP
A=M-1
M=0
@END.20
0;JMP
(TRUE.20)
@SP
A=M-1
M=-1
(END.20)
// neg
@SP
A=M-1
M=!M
// push from address
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.21
D;JLT
@SP
A=M-1
M=0
@END.21
0;JMP
(TRUE.21)
@SP
A=M-1
M=-1
(END.21)
// neg
@SP
A=M-1
M=!M
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE1
D;JNE
// program flow command
@IF_FALSE1
0; JMP
// program flow command
(IF_TRUE1)
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@LCL
D=M
@3
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE1)
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@WHILE_EXP0
0; JMP
// program flow command
(WHILE_END0)
// push from address
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Math.max
// program flow command
(Math.max)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.22
D;JGT
@SP
A=M-1
M=0
@END.22
0;JMP
(TRUE.22)
@SP
A=M-1
M=-1
(END.22)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// program flow command
@IF_FALSE0
0; JMP
// program flow command
(IF_TRUE0)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@ARG
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE0)
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Math.min
// program flow command
(Math.min)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.23
D;JLT
@SP
A=M-1
M=0
@END.23
0;JMP
(TRUE.23)
@SP
A=M-1
M=-1
(END.23)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// program flow command
@IF_FALSE0
0; JMP
// program flow command
(IF_TRUE0)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@ARG
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE0)
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// Bootstrap Start
@261
D=A
@SP
M=D
@Sys.init
0;JMP
// Bootstrap End
// function: Lander.new
// program flow command
(Lander.new)
// push constant
@13
D=A
@SP
M=M+1
A=M-1
M=D
// call Memory.alloc 1 
@CallReturn.9
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.alloc
0; JMP
(CallReturn.9)
// pop address
@THIS
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THIS
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THIS
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.multiply 2 
@CallReturn.10
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0; JMP
(CallReturn.10)
// pop address
@ARG
D=M
@2
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THIS
D=M
@4
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=M
@4
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@4
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.divide 2 
@CallReturn.11
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0; JMP
(CallReturn.11)
// pop address
@THIS
D=M
@2
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=M
@4
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop address
@THIS
D=M
@3
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=M
@4
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.divide 2 
@CallReturn.12
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0; JMP
(CallReturn.12)
// pop address
@THIS
D=M
@5
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=M
@4
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.divide 2 
@CallReturn.13
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0; JMP
(CallReturn.13)
// pop address
@THIS
D=M
@6
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=M
@4
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@6
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop address
@THIS
D=M
@7
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
// pop address
@THIS
D=M
@8
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@5
D=A
@SP
M=M+1
A=M-1
M=D
// pop address
@THIS
D=M
@9
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@5000
D=A
@SP
M=M+1
A=M-1
M=D
// pop address
@THIS
D=M
@11
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop address
@THIS
D=M
@10
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@10
D=A
@SP
M=M+1
A=M-1
M=D
// pop address
@THIS
D=M
@12
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// call String.new 1 
@CallReturn.14
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0; JMP
(CallReturn.14)
// push constant
@70
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2 
@CallReturn.15
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0; JMP
(CallReturn.15)
// push constant
@85
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2 
@CallReturn.16
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0; JMP
(CallReturn.16)
// push constant
@69
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2 
@CallReturn.17
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0; JMP
(CallReturn.17)
// push constant
@76
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2 
@CallReturn.18
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0; JMP
(CallReturn.18)
// push constant
@58
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2 
@CallReturn.19
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0; JMP
(CallReturn.19)
// push constant
@32
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2 
@CallReturn.20
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0; JMP
(CallReturn.20)
// call Output.printString 1 
@CallReturn.21
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0; JMP
(CallReturn.21)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=M
@11
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Output.printInt 1 
@CallReturn.22
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printInt
0; JMP
(CallReturn.22)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Output.println 0 
@CallReturn.23
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.println
0; JMP
(CallReturn.23)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@8
D=A
@SP
M=M+1
A=M-1
M=D
// call String.new 1 
@CallReturn.24
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0; JMP
(CallReturn.24)
// push constant
@84
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2 
@CallReturn.25
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0; JMP
(CallReturn.25)
// push constant
@72
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2 
@CallReturn.26
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0; JMP
(CallReturn.26)
// push constant
@82
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2 
@CallReturn.27
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0; JMP
(CallReturn.27)
// push constant
@85
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2 
@CallReturn.28
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0; JMP
(CallReturn.28)
// push constant
@83
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2 
@CallReturn.29
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0; JMP
(CallReturn.29)
// push constant
@84
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2 
@CallReturn.30
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0; JMP
(CallReturn.30)
// push constant
@58
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2 
@CallReturn.31
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0; JMP
(CallReturn.31)
// push constant
@32
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2 
@CallReturn.32
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0; JMP
(CallReturn.32)
// call Output.printString 1 
@CallReturn.33
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0; JMP
(CallReturn.33)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Output.println 0 
@CallReturn.34
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.println
0; JMP
(CallReturn.34)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@10
D=A
@SP
M=M+1
A=M-1
M=D
// call String.new 1 
@CallReturn.35
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0; JMP
(CallReturn.35)
// push constant
@72
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2 
@CallReturn.36
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0; JMP
(CallReturn.36)
// push constant
@79
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2 
@CallReturn.37
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0; JMP
(CallReturn.37)
// push constant
@82
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2 
@CallReturn.38
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0; JMP
(CallReturn.38)
// push constant
@73
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2 
@CallReturn.39
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0; JMP
(CallReturn.39)
// push constant
@32
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2 
@CallReturn.40
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0; JMP
(CallReturn.40)
// push constant
@86
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2 
@CallReturn.41
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0; JMP
(CallReturn.41)
// push constant
@69
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2 
@CallReturn.42
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0; JMP
(CallReturn.42)
// push constant
@76
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2 
@CallReturn.43
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0; JMP
(CallReturn.43)
// push constant
@58
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2 
@CallReturn.44
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0; JMP
(CallReturn.44)
// push constant
@32
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2 
@CallReturn.45
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0; JMP
(CallReturn.45)
// call Output.printString 1 
@CallReturn.46
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0; JMP
(CallReturn.46)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Output.println 0 
@CallReturn.47
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.println
0; JMP
(CallReturn.47)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@10
D=A
@SP
M=M+1
A=M-1
M=D
// call String.new 1 
@CallReturn.48
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0; JMP
(CallReturn.48)
// push constant
@86
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2 
@CallReturn.49
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0; JMP
(CallReturn.49)
// push constant
@69
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2 
@CallReturn.50
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0; JMP
(CallReturn.50)
// push constant
@82
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2 
@CallReturn.51
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0; JMP
(CallReturn.51)
// push constant
@84
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2 
@CallReturn.52
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0; JMP
(CallReturn.52)
// push constant
@32
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2 
@CallReturn.53
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0; JMP
(CallReturn.53)
// push constant
@86
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2 
@CallReturn.54
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0; JMP
(CallReturn.54)
// push constant
@69
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2 
@CallReturn.55
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0; JMP
(CallReturn.55)
// push constant
@76
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2 
@CallReturn.56
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0; JMP
(CallReturn.56)
// push constant
@58
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2 
@CallReturn.57
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0; JMP
(CallReturn.57)
// push constant
@32
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2 
@CallReturn.58
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0; JMP
(CallReturn.58)
// call Output.printString 1 
@CallReturn.59
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0; JMP
(CallReturn.59)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Lander.drawLander 3 
@CallReturn.60
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@8
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Lander.drawLander
0; JMP
(CallReturn.60)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Lander.dispose
// program flow command
(Lander.dispose)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THIS
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Memory.deAlloc 1 
@CallReturn.61
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0; JMP
(CallReturn.61)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Lander.mainThruster
// program flow command
(Lander.mainThruster)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THIS
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=M
@10
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@10
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.24
D;JLT
@SP
A=M-1
M=0
@END.24
0;JMP
(TRUE.24)
@SP
A=M-1
M=-1
(END.24)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// program flow command
@IF_FALSE0
0; JMP
// program flow command
(IF_TRUE0)
// push from address
@THIS
D=M
@10
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=M
@10
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=M
@11
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@10
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop address
@THIS
D=M
@11
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE0)
// push from address
@THIS
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@10
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Lander.moveLander 3 
@CallReturn.62
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@8
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Lander.moveLander
0; JMP
(CallReturn.62)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Lander.rightThruster
// program flow command
(Lander.rightThruster)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THIS
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=M
@11
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop address
@THIS
D=M
@11
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=-M// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@10
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Lander.moveLander 3 
@CallReturn.63
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@8
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Lander.moveLander
0; JMP
(CallReturn.63)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Lander.leftThruster
// program flow command
(Lander.leftThruster)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THIS
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=M
@11
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop address
@THIS
D=M
@11
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@10
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Lander.moveLander 3 
@CallReturn.64
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@8
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Lander.moveLander
0; JMP
(CallReturn.64)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Lander.negThruster
// program flow command
(Lander.negThruster)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THIS
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=M
@10
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.25
D;JGT
@SP
A=M-1
M=0
@END.25
0;JMP
(TRUE.25)
@SP
A=M-1
M=-1
(END.25)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// program flow command
@IF_FALSE0
0; JMP
// program flow command
(IF_TRUE0)
// push from address
@THIS
D=M
@10
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop address
@THIS
D=M
@10
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE0)
// push from address
@THIS
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@10
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Lander.moveLander 3 
@CallReturn.65
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@8
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Lander.moveLander
0; JMP
(CallReturn.65)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Lander.noThruster
// program flow command
(Lander.noThruster)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THIS
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@10
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Lander.moveLander 3 
@CallReturn.66
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@8
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Lander.moveLander
0; JMP
(CallReturn.66)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Lander.moveLander
// program flow command
(Lander.moveLander)
// init LCL[0] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[1] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[2] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[3] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[4] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[5] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[6] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[7] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[8] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THIS
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@ARG
D=M
@2
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=M
@8
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=M
@8
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=M
@9
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=M
@9
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=M
@8
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.26
D;JLT
@SP
A=M-1
M=0
@END.26
0;JMP
(TRUE.26)
@SP
A=M-1
M=-1
(END.26)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// program flow command
@IF_FALSE0
0; JMP
// program flow command
(IF_TRUE0)
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@8
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop address
@LCL
D=M
@5
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=-M// pop address
@LCL
D=M
@3
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@IF_END0
0; JMP
// program flow command
(IF_FALSE0)
// push from address
@THIS
D=M
@8
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@LCL
D=M
@5
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// pop address
@LCL
D=M
@3
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_END0)
// push from address
@THIS
D=M
@9
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.27
D;JLT
@SP
A=M-1
M=0
@END.27
0;JMP
(TRUE.27)
@SP
A=M-1
M=-1
(END.27)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE1
D;JNE
// program flow command
@IF_FALSE1
0; JMP
// program flow command
(IF_TRUE1)
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@9
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop address
@LCL
D=M
@6
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=-M// pop address
@LCL
D=M
@4
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@IF_END1
0; JMP
// program flow command
(IF_FALSE1)
// push from address
@THIS
D=M
@9
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@LCL
D=M
@6
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// pop address
@LCL
D=M
@4
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_END1)
// push from address
@LCL
D=M
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.28
D;JEQ
@SP
A=M-1
M=0
@END.28
0;JMP
(TRUE.28)
@SP
A=M-1
M=-1
(END.28)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE2
D;JNE
// program flow command
@IF_FALSE2
0; JMP
// program flow command
(IF_TRUE2)
// push from address
@THIS
D=M
@12
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@IF_END2
0; JMP
// program flow command
(IF_FALSE2)
// push from address
@THIS
D=M
@12
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Math.divide 2 
@CallReturn.67
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0; JMP
(CallReturn.67)
// pop address
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_END2)
// push from address
@LCL
D=M
@6
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.29
D;JEQ
@SP
A=M-1
M=0
@END.29
0;JMP
(TRUE.29)
@SP
A=M-1
M=-1
(END.29)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE3
D;JNE
// program flow command
@IF_FALSE3
0; JMP
// program flow command
(IF_TRUE3)
// push from address
@THIS
D=M
@12
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@LCL
D=M
@2
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@IF_END3
0; JMP
// program flow command
(IF_FALSE3)
// push from address
@THIS
D=M
@12
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@6
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Math.divide 2 
@CallReturn.68
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0; JMP
(CallReturn.68)
// pop address
@LCL
D=M
@2
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_END3)
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(WHILE_EXP0)
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@12
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.30
D;JLT
@SP
A=M-1
M=0
@END.30
0;JMP
(TRUE.30)
@SP
A=M-1
M=-1
(END.30)
// neg
@SP
A=M-1
M=!M
// program flow command
@SP
AM=M-1
D=M
@WHILE_END0
D;JNE
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.31
D;JEQ
@SP
A=M-1
M=0
@END.31
0;JMP
(TRUE.31)
@SP
A=M-1
M=-1
(END.31)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE4
D;JNE
// program flow command
@IF_FALSE4
0; JMP
// program flow command
(IF_TRUE4)
// push from address
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@LCL
D=M
@7
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE4)
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.32
D;JEQ
@SP
A=M-1
M=0
@END.32
0;JMP
(TRUE.32)
@SP
A=M-1
M=-1
(END.32)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE5
D;JNE
// program flow command
@IF_FALSE5
0; JMP
// program flow command
(IF_TRUE5)
// push from address
@LCL
D=M
@4
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@LCL
D=M
@8
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@LCL
D=M
@2
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE5)
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.33
D;JEQ
@SP
A=M-1
M=0
@END.33
0;JMP
(TRUE.33)
@SP
A=M-1
M=-1
(END.33)
// push from address
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.34
D;JEQ
@SP
A=M-1
M=0
@END.34
0;JMP
(TRUE.34)
@SP
A=M-1
M=-1
(END.34)
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// neg
@SP
A=M-1
M=!M
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE6
D;JNE
// program flow command
@IF_FALSE6
0; JMP
// program flow command
(IF_TRUE6)
// push from address
@THIS
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@7
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@8
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Lander.move 3 
@CallReturn.69
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@8
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Lander.move
0; JMP
(CallReturn.69)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE6)
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@WHILE_EXP0
0; JMP
// program flow command
(WHILE_END0)
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Lander.move
// program flow command
(Lander.move)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THIS
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.35
D;JLT
@SP
A=M-1
M=0
@END.35
0;JMP
(TRUE.35)
@SP
A=M-1
M=-1
(END.35)
// push from address
@THIS
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant
@254
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.36
D;JGT
@SP
A=M-1
M=0
@END.36
0;JMP
(TRUE.36)
@SP
A=M-1
M=-1
(END.36)
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// program flow command
@IF_FALSE0
0; JMP
// program flow command
(IF_TRUE0)
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop address
@ARG
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE0)
// push from address
@THIS
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.37
D;JLT
@SP
A=M-1
M=0
@END.37
0;JMP
(TRUE.37)
@SP
A=M-1
M=-1
(END.37)
// push from address
@THIS
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant
@210
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.38
D;JGT
@SP
A=M-1
M=0
@END.38
0;JMP
(TRUE.38)
@SP
A=M-1
M=-1
(END.38)
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE1
D;JNE
// program flow command
@IF_FALSE1
0; JMP
// program flow command
(IF_TRUE1)
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop address
@ARG
D=M
@2
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE1)
// push from address
@THIS
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=!M
// push from address
@THIS
D=M
@10
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Lander.drawLander 3 
@CallReturn.70
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@8
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Lander.drawLander
0; JMP
(CallReturn.70)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@10
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Lander.drawLander 3 
@CallReturn.71
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@8
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Lander.drawLander
0; JMP
(CallReturn.71)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Lander.drawLander
// program flow command
(Lander.drawLander)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THIS
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.moveCursor 2 
@CallReturn.72
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.moveCursor
0; JMP
(CallReturn.72)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=M
@11
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Output.printInt 1 
@CallReturn.73
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printInt
0; JMP
(CallReturn.73)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@8
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.moveCursor 2 
@CallReturn.74
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.moveCursor
0; JMP
(CallReturn.74)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=M
@10
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Output.printInt 1 
@CallReturn.75
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printInt
0; JMP
(CallReturn.75)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@10
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.moveCursor 2 
@CallReturn.76
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.moveCursor
0; JMP
(CallReturn.76)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=M
@8
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Output.printInt 1 
@CallReturn.77
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printInt
0; JMP
(CallReturn.77)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@10
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.moveCursor 2 
@CallReturn.78
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.moveCursor
0; JMP
(CallReturn.78)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=M
@9
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Output.printInt 1 
@CallReturn.79
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printInt
0; JMP
(CallReturn.79)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Screen.setColor 1 
@CallReturn.80
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0; JMP
(CallReturn.80)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@THIS
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@THIS
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Screen.drawLine 4 
@CallReturn.81
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@9
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawLine
0; JMP
(CallReturn.81)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@THIS
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@4
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@THIS
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawLine 4 
@CallReturn.82
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@9
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawLine
0; JMP
(CallReturn.82)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@4
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@THIS
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@THIS
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@4
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@THIS
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawLine 4 
@CallReturn.83
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@9
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawLine
0; JMP
(CallReturn.83)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@4
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@THIS
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@THIS
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawLine 4 
@CallReturn.84
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@9
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawLine
0; JMP
(CallReturn.84)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@THIS
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawLine 4 
@CallReturn.85
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@9
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawLine
0; JMP
(CallReturn.85)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@THIS
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@THIS
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Screen.drawLine 4 
@CallReturn.86
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@9
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawLine
0; JMP
(CallReturn.86)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@6
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@THIS
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@THIS
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@4
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawLine 4 
@CallReturn.87
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@9
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawLine
0; JMP
(CallReturn.87)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@7
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@THIS
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@THIS
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@4
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@THIS
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@4
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawLine 4 
@CallReturn.88
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@9
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawLine
0; JMP
(CallReturn.88)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@6
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@THIS
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@THIS
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@THIS
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawLine 4 
@CallReturn.89
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@9
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawLine
0; JMP
(CallReturn.89)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@7
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@THIS
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@THIS
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@THIS
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawLine 4 
@CallReturn.90
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@9
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawLine
0; JMP
(CallReturn.90)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// Bootstrap Start
@261
D=A
@SP
M=D
@Sys.init
0;JMP
// Bootstrap End
// function: Screen.init
// program flow command
(Screen.init)
// init LCL[0] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@16384
D=A
@SP
M=M+1
A=M-1
M=D
// pop static
@Screen.1
D=M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=!M
// pop static
@Screen.2
D=M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@17
D=A
@SP
M=M+1
A=M-1
M=D
// call Array.new 1 
@CallReturn.91
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0; JMP
(CallReturn.91)
// pop static
@Screen.0
D=M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push static
@Screen.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(WHILE_EXP0)
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@16
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.39
D;JLT
@SP
A=M-1
M=0
@END.39
0;JMP
(TRUE.39)
@SP
A=M-1
M=-1
(END.39)
// neg
@SP
A=M-1
M=!M
// program flow command
@SP
AM=M-1
D=M
@WHILE_END0
D;JNE
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push static
@Screen.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push static
@Screen.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push static
@Screen.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@WHILE_EXP0
0; JMP
// program flow command
(WHILE_END0)
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Screen.clearScreen
// program flow command
(Screen.clearScreen)
// init LCL[0] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// program flow command
(WHILE_EXP0)
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@8192
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.40
D;JLT
@SP
A=M-1
M=0
@END.40
0;JMP
(TRUE.40)
@SP
A=M-1
M=-1
(END.40)
// neg
@SP
A=M-1
M=!M
// program flow command
@SP
AM=M-1
D=M
@WHILE_END0
D;JNE
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push static
@Screen.1
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@WHILE_EXP0
0; JMP
// program flow command
(WHILE_END0)
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Screen.updateLocation
// program flow command
(Screen.updateLocation)
// push static
@Screen.2
D=M
@SP
M=M+1
A=M-1
M=D
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// program flow command
@IF_FALSE0
0; JMP
// program flow command
(IF_TRUE0)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push static
@Screen.1
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push static
@Screen.1
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@IF_END0
0; JMP
// program flow command
(IF_FALSE0)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push static
@Screen.1
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push static
@Screen.1
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=!M
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_END0)
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Screen.setColor
// program flow command
(Screen.setColor)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop static
@Screen.2
D=M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Screen.drawPixel
// program flow command
(Screen.drawPixel)
// init LCL[0] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[1] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[2] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.41
D;JLT
@SP
A=M-1
M=0
@END.41
0;JMP
(TRUE.41)
@SP
A=M-1
M=-1
(END.41)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@511
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.42
D;JGT
@SP
A=M-1
M=0
@END.42
0;JMP
(TRUE.42)
@SP
A=M-1
M=-1
(END.42)
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.43
D;JLT
@SP
A=M-1
M=0
@END.43
0;JMP
(TRUE.43)
@SP
A=M-1
M=-1
(END.43)
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@255
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.44
D;JGT
@SP
A=M-1
M=0
@END.44
0;JMP
(TRUE.44)
@SP
A=M-1
M=-1
(END.44)
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// program flow command
@IF_FALSE0
0; JMP
// program flow command
(IF_TRUE0)
// push constant
@7
D=A
@SP
M=M+1
A=M-1
M=D
// call Sys.error 1 
@CallReturn.92
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0; JMP
(CallReturn.92)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE0)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@16
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.divide 2 
@CallReturn.93
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0; JMP
(CallReturn.93)
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@16
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.multiply 2 
@CallReturn.94
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0; JMP
(CallReturn.94)
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop address
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@32
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.multiply 2 
@CallReturn.95
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0; JMP
(CallReturn.95)
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@LCL
D=M
@2
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push static
@Screen.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Screen.updateLocation 2 
@CallReturn.96
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0; JMP
(CallReturn.96)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Screen.drawConditional
// program flow command
(Screen.drawConditional)
// push from address
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// program flow command
@IF_FALSE0
0; JMP
// program flow command
(IF_TRUE0)
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Screen.drawPixel 2 
@CallReturn.97
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawPixel
0; JMP
(CallReturn.97)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@IF_END0
0; JMP
// program flow command
(IF_FALSE0)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Screen.drawPixel 2 
@CallReturn.98
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawPixel
0; JMP
(CallReturn.98)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_END0)
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Screen.drawLine
// program flow command
(Screen.drawLine)
// init LCL[0] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[1] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[2] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[3] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[4] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[5] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[6] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[7] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[8] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[9] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[10] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.45
D;JLT
@SP
A=M-1
M=0
@END.45
0;JMP
(TRUE.45)
@SP
A=M-1
M=-1
(END.45)
// push from address
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@511
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.46
D;JGT
@SP
A=M-1
M=0
@END.46
0;JMP
(TRUE.46)
@SP
A=M-1
M=-1
(END.46)
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.47
D;JLT
@SP
A=M-1
M=0
@END.47
0;JMP
(TRUE.47)
@SP
A=M-1
M=-1
(END.47)
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// push from address
@ARG
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@255
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.48
D;JGT
@SP
A=M-1
M=0
@END.48
0;JMP
(TRUE.48)
@SP
A=M-1
M=-1
(END.48)
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// program flow command
@IF_FALSE0
0; JMP
// program flow command
(IF_TRUE0)
// push constant
@8
D=A
@SP
M=M+1
A=M-1
M=D
// call Sys.error 1 
@CallReturn.99
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0; JMP
(CallReturn.99)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE0)
// push from address
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Math.abs 1 
@CallReturn.100
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0; JMP
(CallReturn.100)
// pop address
@LCL
D=M
@3
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Math.abs 1 
@CallReturn.101
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.abs
0; JMP
(CallReturn.101)
// pop address
@LCL
D=M
@2
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.49
D;JLT
@SP
A=M-1
M=0
@END.49
0;JMP
(TRUE.49)
@SP
A=M-1
M=-1
(END.49)
// pop address
@LCL
D=M
@6
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@6
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.50
D;JLT
@SP
A=M-1
M=0
@END.50
0;JMP
(TRUE.50)
@SP
A=M-1
M=-1
(END.50)
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// push from address
@LCL
D=M
@6
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=!M
// push from address
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.51
D;JLT
@SP
A=M-1
M=0
@END.51
0;JMP
(TRUE.51)
@SP
A=M-1
M=-1
(END.51)
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE1
D;JNE
// program flow command
@IF_FALSE1
0; JMP
// program flow command
(IF_TRUE1)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@LCL
D=M
@4
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@4
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@ARG
D=M
@2
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@LCL
D=M
@4
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@ARG
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@4
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@ARG
D=M
@3
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE1)
// push from address
@LCL
D=M
@6
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE2
D;JNE
// program flow command
@IF_FALSE2
0; JMP
// program flow command
(IF_TRUE2)
// push from address
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@LCL
D=M
@4
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@LCL
D=M
@3
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@4
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@LCL
D=M
@2
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@LCL
D=M
@8
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.52
D;JGT
@SP
A=M-1
M=0
@END.52
0;JMP
(TRUE.52)
@SP
A=M-1
M=-1
(END.52)
// pop address
@LCL
D=M
@7
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@IF_END2
0; JMP
// program flow command
(IF_FALSE2)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@LCL
D=M
@8
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.53
D;JGT
@SP
A=M-1
M=0
@END.53
0;JMP
(TRUE.53)
@SP
A=M-1
M=-1
(END.53)
// pop address
@LCL
D=M
@7
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_END2)
// push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Math.multiply 2 
@CallReturn.102
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0; JMP
(CallReturn.102)
// push from address
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop address
@LCL
D=M
@5
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Math.multiply 2 
@CallReturn.103
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0; JMP
(CallReturn.103)
// pop address
@LCL
D=M
@9
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Math.multiply 2 
@CallReturn.104
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0; JMP
(CallReturn.104)
// pop address
@LCL
D=M
@10
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@6
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Screen.drawConditional 3 
@CallReturn.105
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@8
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawConditional
0; JMP
(CallReturn.105)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(WHILE_EXP0)
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@8
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.54
D;JLT
@SP
A=M-1
M=0
@END.54
0;JMP
(TRUE.54)
@SP
A=M-1
M=-1
(END.54)
// neg
@SP
A=M-1
M=!M
// program flow command
@SP
AM=M-1
D=M
@WHILE_END0
D;JNE
// push from address
@LCL
D=M
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.55
D;JLT
@SP
A=M-1
M=0
@END.55
0;JMP
(TRUE.55)
@SP
A=M-1
M=-1
(END.55)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE3
D;JNE
// program flow command
@IF_FALSE3
0; JMP
// program flow command
(IF_TRUE3)
// push from address
@LCL
D=M
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@9
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@LCL
D=M
@5
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@IF_END3
0; JMP
// program flow command
(IF_FALSE3)
// push from address
@LCL
D=M
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@10
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@LCL
D=M
@5
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@7
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE4
D;JNE
// program flow command
@IF_FALSE4
0; JMP
// program flow command
(IF_TRUE4)
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@IF_END4
0; JMP
// program flow command
(IF_FALSE4)
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_END4)
// program flow command
(IF_END3)
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@6
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Screen.drawConditional 3 
@CallReturn.106
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@8
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawConditional
0; JMP
(CallReturn.106)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@WHILE_EXP0
0; JMP
// program flow command
(WHILE_END0)
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Screen.drawRectangle
// program flow command
(Screen.drawRectangle)
// init LCL[0] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[1] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[2] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[3] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[4] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[5] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[6] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[7] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[8] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.56
D;JGT
@SP
A=M-1
M=0
@END.56
0;JMP
(TRUE.56)
@SP
A=M-1
M=-1
(END.56)
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.57
D;JGT
@SP
A=M-1
M=0
@END.57
0;JMP
(TRUE.57)
@SP
A=M-1
M=-1
(END.57)
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.58
D;JLT
@SP
A=M-1
M=0
@END.58
0;JMP
(TRUE.58)
@SP
A=M-1
M=-1
(END.58)
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// push from address
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@511
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.59
D;JGT
@SP
A=M-1
M=0
@END.59
0;JMP
(TRUE.59)
@SP
A=M-1
M=-1
(END.59)
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.60
D;JLT
@SP
A=M-1
M=0
@END.60
0;JMP
(TRUE.60)
@SP
A=M-1
M=-1
(END.60)
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// push from address
@ARG
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@255
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.61
D;JGT
@SP
A=M-1
M=0
@END.61
0;JMP
(TRUE.61)
@SP
A=M-1
M=-1
(END.61)
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// program flow command
@IF_FALSE0
0; JMP
// program flow command
(IF_TRUE0)
// push constant
@9
D=A
@SP
M=M+1
A=M-1
M=D
// call Sys.error 1 
@CallReturn.107
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0; JMP
(CallReturn.107)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE0)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@16
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.divide 2 
@CallReturn.108
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0; JMP
(CallReturn.108)
// pop address
@LCL
D=M
@3
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@16
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.multiply 2 
@CallReturn.109
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0; JMP
(CallReturn.109)
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop address
@LCL
D=M
@7
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@16
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.divide 2 
@CallReturn.110
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0; JMP
(CallReturn.110)
// pop address
@LCL
D=M
@4
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@4
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@16
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.multiply 2 
@CallReturn.111
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0; JMP
(CallReturn.111)
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop address
@LCL
D=M
@8
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@7
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push static
@Screen.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// neg
@SP
A=M-1
M=!M
// pop address
@LCL
D=M
@6
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@8
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push static
@Screen.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop address
@LCL
D=M
@5
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@32
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.multiply 2 
@CallReturn.112
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0; JMP
(CallReturn.112)
// push from address
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@4
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop address
@LCL
D=M
@2
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(WHILE_EXP0)
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.62
D;JGT
@SP
A=M-1
M=0
@END.62
0;JMP
(TRUE.62)
@SP
A=M-1
M=-1
(END.62)
// neg
@SP
A=M-1
M=!M
// neg
@SP
A=M-1
M=!M
// program flow command
@SP
AM=M-1
D=M
@WHILE_END0
D;JNE
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.63
D;JEQ
@SP
A=M-1
M=0
@END.63
0;JMP
(TRUE.63)
@SP
A=M-1
M=-1
(END.63)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE1
D;JNE
// program flow command
@IF_FALSE1
0; JMP
// program flow command
(IF_TRUE1)
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@6
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// call Screen.updateLocation 2 
@CallReturn.113
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0; JMP
(CallReturn.113)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@IF_END1
0; JMP
// program flow command
(IF_FALSE1)
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@6
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Screen.updateLocation 2 
@CallReturn.114
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0; JMP
(CallReturn.114)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(WHILE_EXP1)
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.64
D;JLT
@SP
A=M-1
M=0
@END.64
0;JMP
(TRUE.64)
@SP
A=M-1
M=-1
(END.64)
// neg
@SP
A=M-1
M=!M
// program flow command
@SP
AM=M-1
D=M
@WHILE_END1
D;JNE
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=-M// call Screen.updateLocation 2 
@CallReturn.115
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0; JMP
(CallReturn.115)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@WHILE_EXP1
0; JMP
// program flow command
(WHILE_END1)
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Screen.updateLocation 2 
@CallReturn.116
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0; JMP
(CallReturn.116)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_END1)
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@ARG
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@32
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@WHILE_EXP0
0; JMP
// program flow command
(WHILE_END0)
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Screen.drawHorizontal
// program flow command
(Screen.drawHorizontal)
// init LCL[0] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[1] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[2] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[3] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[4] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[5] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[6] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[7] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[8] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[9] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[10] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Math.min 2 
@CallReturn.117
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.min
0; JMP
(CallReturn.117)
// pop address
@LCL
D=M
@7
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Math.max 2 
@CallReturn.118
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.max
0; JMP
(CallReturn.118)
// pop address
@LCL
D=M
@8
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=-M//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.65
D;JGT
@SP
A=M-1
M=0
@END.65
0;JMP
(TRUE.65)
@SP
A=M-1
M=-1
(END.65)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@256
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.66
D;JLT
@SP
A=M-1
M=0
@END.66
0;JMP
(TRUE.66)
@SP
A=M-1
M=-1
(END.66)
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// push from address
@LCL
D=M
@7
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@512
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.67
D;JLT
@SP
A=M-1
M=0
@END.67
0;JMP
(TRUE.67)
@SP
A=M-1
M=-1
(END.67)
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// push from address
@LCL
D=M
@8
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=-M//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.68
D;JGT
@SP
A=M-1
M=0
@END.68
0;JMP
(TRUE.68)
@SP
A=M-1
M=-1
(END.68)
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// program flow command
@IF_FALSE0
0; JMP
// program flow command
(IF_TRUE0)
// push from address
@LCL
D=M
@7
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.max 2 
@CallReturn.119
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.max
0; JMP
(CallReturn.119)
// pop address
@LCL
D=M
@7
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@8
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@511
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.min 2 
@CallReturn.120
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.min
0; JMP
(CallReturn.120)
// pop address
@LCL
D=M
@8
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@7
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@16
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.divide 2 
@CallReturn.121
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0; JMP
(CallReturn.121)
// pop address
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@7
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@16
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.multiply 2 
@CallReturn.122
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0; JMP
(CallReturn.122)
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop address
@LCL
D=M
@9
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@8
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@16
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.divide 2 
@CallReturn.123
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0; JMP
(CallReturn.123)
// pop address
@LCL
D=M
@2
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@8
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@16
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.multiply 2 
@CallReturn.124
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0; JMP
(CallReturn.124)
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop address
@LCL
D=M
@10
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@9
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push static
@Screen.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// neg
@SP
A=M-1
M=!M
// pop address
@LCL
D=M
@5
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@10
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push static
@Screen.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop address
@LCL
D=M
@4
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@32
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.multiply 2 
@CallReturn.125
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0; JMP
(CallReturn.125)
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop address
@LCL
D=M
@6
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@6
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@LCL
D=M
@3
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@6
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.69
D;JEQ
@SP
A=M-1
M=0
@END.69
0;JMP
(TRUE.69)
@SP
A=M-1
M=-1
(END.69)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE1
D;JNE
// program flow command
@IF_FALSE1
0; JMP
// program flow command
(IF_TRUE1)
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@4
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// call Screen.updateLocation 2 
@CallReturn.126
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0; JMP
(CallReturn.126)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@IF_END1
0; JMP
// program flow command
(IF_FALSE1)
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Screen.updateLocation 2 
@CallReturn.127
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0; JMP
(CallReturn.127)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(WHILE_EXP0)
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.70
D;JLT
@SP
A=M-1
M=0
@END.70
0;JMP
(TRUE.70)
@SP
A=M-1
M=-1
(END.70)
// neg
@SP
A=M-1
M=!M
// program flow command
@SP
AM=M-1
D=M
@WHILE_END0
D;JNE
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=-M// call Screen.updateLocation 2 
@CallReturn.128
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0; JMP
(CallReturn.128)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@WHILE_EXP0
0; JMP
// program flow command
(WHILE_END0)
// push from address
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@4
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Screen.updateLocation 2 
@CallReturn.129
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.updateLocation
0; JMP
(CallReturn.129)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_END1)
// program flow command
(IF_FALSE0)
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Screen.drawSymetric
// program flow command
(Screen.drawSymetric)
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Screen.drawHorizontal 3 
@CallReturn.130
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@8
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawHorizontal
0; JMP
(CallReturn.130)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Screen.drawHorizontal 3 
@CallReturn.131
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@8
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawHorizontal
0; JMP
(CallReturn.131)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawHorizontal 3 
@CallReturn.132
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@8
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawHorizontal
0; JMP
(CallReturn.132)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// call Screen.drawHorizontal 3 
@CallReturn.133
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@8
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawHorizontal
0; JMP
(CallReturn.133)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Screen.drawCircle
// program flow command
(Screen.drawCircle)
// init LCL[0] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[1] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[2] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.71
D;JLT
@SP
A=M-1
M=0
@END.71
0;JMP
(TRUE.71)
@SP
A=M-1
M=-1
(END.71)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@511
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.72
D;JGT
@SP
A=M-1
M=0
@END.72
0;JMP
(TRUE.72)
@SP
A=M-1
M=-1
(END.72)
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.73
D;JLT
@SP
A=M-1
M=0
@END.73
0;JMP
(TRUE.73)
@SP
A=M-1
M=-1
(END.73)
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@255
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.74
D;JGT
@SP
A=M-1
M=0
@END.74
0;JMP
(TRUE.74)
@SP
A=M-1
M=-1
(END.74)
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// program flow command
@IF_FALSE0
0; JMP
// program flow command
(IF_TRUE0)
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// call Sys.error 1 
@CallReturn.134
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0; JMP
(CallReturn.134)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE0)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.75
D;JLT
@SP
A=M-1
M=0
@END.75
0;JMP
(TRUE.75)
@SP
A=M-1
M=-1
(END.75)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant
@511
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.76
D;JGT
@SP
A=M-1
M=0
@END.76
0;JMP
(TRUE.76)
@SP
A=M-1
M=-1
(END.76)
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.77
D;JLT
@SP
A=M-1
M=0
@END.77
0;JMP
(TRUE.77)
@SP
A=M-1
M=-1
(END.77)
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant
@255
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.78
D;JGT
@SP
A=M-1
M=0
@END.78
0;JMP
(TRUE.78)
@SP
A=M-1
M=-1
(END.78)
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE1
D;JNE
// program flow command
@IF_FALSE1
0; JMP
// program flow command
(IF_TRUE1)
// push constant
@13
D=A
@SP
M=M+1
A=M-1
M=D
// call Sys.error 1 
@CallReturn.135
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0; JMP
(CallReturn.135)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE1)
// push from address
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop address
@LCL
D=M
@2
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Screen.drawSymetric 4 
@CallReturn.136
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@9
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawSymetric
0; JMP
(CallReturn.136)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(WHILE_EXP0)
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.79
D;JGT
@SP
A=M-1
M=0
@END.79
0;JMP
(TRUE.79)
@SP
A=M-1
M=-1
(END.79)
// neg
@SP
A=M-1
M=!M
// program flow command
@SP
AM=M-1
D=M
@WHILE_END0
D;JNE
// push from address
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.80
D;JLT
@SP
A=M-1
M=0
@END.80
0;JMP
(TRUE.80)
@SP
A=M-1
M=-1
(END.80)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE2
D;JNE
// program flow command
@IF_FALSE2
0; JMP
// program flow command
(IF_TRUE2)
// push from address
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Math.multiply 2 
@CallReturn.137
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0; JMP
(CallReturn.137)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@LCL
D=M
@2
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@IF_END2
0; JMP
// program flow command
(IF_FALSE2)
// push from address
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// call Math.multiply 2 
@CallReturn.138
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0; JMP
(CallReturn.138)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant
@5
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@LCL
D=M
@2
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop address
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_END2)
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Screen.drawSymetric 4 
@CallReturn.139
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@9
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawSymetric
0; JMP
(CallReturn.139)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@WHILE_EXP0
0; JMP
// program flow command
(WHILE_END0)
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// Bootstrap Start
@261
D=A
@SP
M=D
@Sys.init
0;JMP
// Bootstrap End
// function: Memory.init
// program flow command
(Memory.init)
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop static
@Memory.0
D=M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@2048
D=A
@SP
M=M+1
A=M-1
M=D
// push static
@Memory.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant
@14334
D=A
@SP
M=M+1
A=M-1
M=D
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@2049
D=A
@SP
M=M+1
A=M-1
M=D
// push static
@Memory.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant
@2050
D=A
@SP
M=M+1
A=M-1
M=D
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Memory.peek
// program flow command
(Memory.peek)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push static
@Memory.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Memory.poke
// program flow command
(Memory.poke)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push static
@Memory.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Memory.alloc
// program flow command
(Memory.alloc)
// init LCL[0] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.81
D;JLT
@SP
A=M-1
M=0
@END.81
0;JMP
(TRUE.81)
@SP
A=M-1
M=-1
(END.81)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// program flow command
@IF_FALSE0
0; JMP
// program flow command
(IF_TRUE0)
// push constant
@5
D=A
@SP
M=M+1
A=M-1
M=D
// call Sys.error 1 
@CallReturn.140
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0; JMP
(CallReturn.140)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE0)
// push constant
@2048
D=A
@SP
M=M+1
A=M-1
M=D
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(WHILE_EXP0)
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.82
D;JLT
@SP
A=M-1
M=0
@END.82
0;JMP
(TRUE.82)
@SP
A=M-1
M=-1
(END.82)
// neg
@SP
A=M-1
M=!M
// program flow command
@SP
AM=M-1
D=M
@WHILE_END0
D;JNE
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@WHILE_EXP0
0; JMP
// program flow command
(WHILE_END0)
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant
@16379
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.83
D;JGT
@SP
A=M-1
M=0
@END.83
0;JMP
(TRUE.83)
@SP
A=M-1
M=-1
(END.83)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE1
D;JNE
// program flow command
@IF_FALSE1
0; JMP
// program flow command
(IF_TRUE1)
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// call Sys.error 1 
@CallReturn.141
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0; JMP
(CallReturn.141)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE1)
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.84
D;JGT
@SP
A=M-1
M=0
@END.84
0;JMP
(TRUE.84)
@SP
A=M-1
M=-1
(END.84)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE2
D;JNE
// program flow command
@IF_FALSE2
0; JMP
// program flow command
(IF_TRUE2)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.85
D;JEQ
@SP
A=M-1
M=0
@END.85
0;JMP
(TRUE.85)
@SP
A=M-1
M=-1
(END.85)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE3
D;JNE
// program flow command
@IF_FALSE3
0; JMP
// program flow command
(IF_TRUE3)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant
@4
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@IF_END3
0; JMP
// program flow command
(IF_FALSE3)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_END3)
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE2)
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Memory.deAlloc
// program flow command
(Memory.deAlloc)
// init LCL[0] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[1] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.86
D;JEQ
@SP
A=M-1
M=0
@END.86
0;JMP
(TRUE.86)
@SP
A=M-1
M=-1
(END.86)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// program flow command
@IF_FALSE0
0; JMP
// program flow command
(IF_TRUE0)
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@IF_END0
0; JMP
// program flow command
(IF_FALSE0)
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
//eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.87
D;JEQ
@SP
A=M-1
M=0
@END.87
0;JMP
(TRUE.87)
@SP
A=M-1
M=-1
(END.87)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE1
D;JNE
// program flow command
@IF_FALSE1
0; JMP
// program flow command
(IF_TRUE1)
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@IF_END1
0; JMP
// program flow command
(IF_FALSE1)
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_END1)
// program flow command
(IF_END0)
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// Bootstrap Start
@261
D=A
@SP
M=D
@Sys.init
0;JMP
// Bootstrap End
// function: LanderGame.new
// program flow command
(LanderGame.new)
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// call Memory.alloc 1 
@CallReturn.142
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.alloc
0; JMP
(CallReturn.142)
// pop address
@THIS
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call LanderGame.initScreen 1 
@CallReturn.143
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@LanderGame.initScreen
0; JMP
(CallReturn.143)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@200
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// call Lander.new 3 
@CallReturn.144
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@8
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Lander.new
0; JMP
(CallReturn.144)
// pop address
@THIS
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: LanderGame.dispose
// program flow command
(LanderGame.dispose)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THIS
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Lander.dispose 1 
@CallReturn.145
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Lander.dispose
0; JMP
(CallReturn.145)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Memory.deAlloc 1 
@CallReturn.146
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0; JMP
(CallReturn.146)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: LanderGame.initScreen
// program flow command
(LanderGame.initScreen)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THIS
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=!M
// call Screen.setColor 1 
@CallReturn.147
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.setColor
0; JMP
(CallReturn.147)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@510
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@255
D=A
@SP
M=M+1
A=M-1
M=D
// call Screen.drawRectangle 4 
@CallReturn.148
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@9
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.drawRectangle
0; JMP
(CallReturn.148)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: LanderGame.run
// program flow command
(LanderGame.run)
// init LCL[0] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[1] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THIS
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop address
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(WHILE_EXP0)
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=!M
// neg
@SP
A=M-1
M=!M
// program flow command
@SP
AM=M-1
D=M
@WHILE_END0
D;JNE
// call Keyboard.keyPressed 0 
@CallReturn.149
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Keyboard.keyPressed
0; JMP
(CallReturn.149)
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@81
D=A
@SP
M=M+1
A=M-1
M=D
//eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.88
D;JEQ
@SP
A=M-1
M=0
@END.88
0;JMP
(TRUE.88)
@SP
A=M-1
M=-1
(END.88)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// program flow command
@IF_FALSE0
0; JMP
// program flow command
(IF_TRUE0)
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=!M
// pop address
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE0)
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@131
D=A
@SP
M=M+1
A=M-1
M=D
//eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.89
D;JEQ
@SP
A=M-1
M=0
@END.89
0;JMP
(TRUE.89)
@SP
A=M-1
M=-1
(END.89)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE1
D;JNE
// program flow command
@IF_FALSE1
0; JMP
// program flow command
(IF_TRUE1)
// push from address
@THIS
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Lander.mainThruster 1 
@CallReturn.150
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Lander.mainThruster
0; JMP
(CallReturn.150)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE1)
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@133
D=A
@SP
M=M+1
A=M-1
M=D
//eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.90
D;JEQ
@SP
A=M-1
M=0
@END.90
0;JMP
(TRUE.90)
@SP
A=M-1
M=-1
(END.90)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE2
D;JNE
// program flow command
@IF_FALSE2
0; JMP
// program flow command
(IF_TRUE2)
// push from address
@THIS
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Lander.negThruster 1 
@CallReturn.151
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Lander.negThruster
0; JMP
(CallReturn.151)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE2)
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@130
D=A
@SP
M=M+1
A=M-1
M=D
//eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.91
D;JEQ
@SP
A=M-1
M=0
@END.91
0;JMP
(TRUE.91)
@SP
A=M-1
M=-1
(END.91)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE3
D;JNE
// program flow command
@IF_FALSE3
0; JMP
// program flow command
(IF_TRUE3)
// push from address
@THIS
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Lander.leftThruster 1 
@CallReturn.152
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Lander.leftThruster
0; JMP
(CallReturn.152)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE3)
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@132
D=A
@SP
M=M+1
A=M-1
M=D
//eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.92
D;JEQ
@SP
A=M-1
M=0
@END.92
0;JMP
(TRUE.92)
@SP
A=M-1
M=-1
(END.92)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE4
D;JNE
// program flow command
@IF_FALSE4
0; JMP
// program flow command
(IF_TRUE4)
// push from address
@THIS
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Lander.rightThruster 1 
@CallReturn.153
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Lander.rightThruster
0; JMP
(CallReturn.153)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@IF_END4
0; JMP
// program flow command
(IF_FALSE4)
// push from address
@THIS
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Lander.noThruster 1 
@CallReturn.154
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Lander.noThruster
0; JMP
(CallReturn.154)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_END4)
// program flow command
@WHILE_EXP0
0; JMP
// program flow command
(WHILE_END0)
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// Bootstrap Start
@261
D=A
@SP
M=D
@Sys.init
0;JMP
// Bootstrap End
// function: Main.main
// program flow command
(Main.main)
// init LCL[0] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call LanderGame.new 0 
@CallReturn.155
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@LanderGame.new
0; JMP
(CallReturn.155)
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call LanderGame.run 1 
@CallReturn.156
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@LanderGame.run
0; JMP
(CallReturn.156)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call LanderGame.dispose 1 
@CallReturn.157
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@LanderGame.dispose
0; JMP
(CallReturn.157)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// Bootstrap Start
@261
D=A
@SP
M=D
@Sys.init
0;JMP
// Bootstrap End
// function: Sys.init
// program flow command
(Sys.init)
// call Memory.init 0 
@CallReturn.158
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.init
0; JMP
(CallReturn.158)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Math.init 0 
@CallReturn.159
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.init
0; JMP
(CallReturn.159)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Screen.init 0 
@CallReturn.160
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Screen.init
0; JMP
(CallReturn.160)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Output.init 0 
@CallReturn.161
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.init
0; JMP
(CallReturn.161)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Keyboard.init 0 
@CallReturn.162
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Keyboard.init
0; JMP
(CallReturn.162)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Main.main 0 
@CallReturn.163
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Main.main
0; JMP
(CallReturn.163)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Sys.halt 0 
@CallReturn.164
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.halt
0; JMP
(CallReturn.164)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Sys.halt
// program flow command
(Sys.halt)
// program flow command
(WHILE_EXP0)
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=!M
// neg
@SP
A=M-1
M=!M
// program flow command
@SP
AM=M-1
D=M
@WHILE_END0
D;JNE
// program flow command
@WHILE_EXP0
0; JMP
// program flow command
(WHILE_END0)
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Sys.wait
// program flow command
(Sys.wait)
// init LCL[0] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.93
D;JLT
@SP
A=M-1
M=0
@END.93
0;JMP
(TRUE.93)
@SP
A=M-1
M=-1
(END.93)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// program flow command
@IF_FALSE0
0; JMP
// program flow command
(IF_TRUE0)
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// call Sys.error 1 
@CallReturn.165
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0; JMP
(CallReturn.165)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE0)
// program flow command
(WHILE_EXP0)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.94
D;JGT
@SP
A=M-1
M=0
@END.94
0;JMP
(TRUE.94)
@SP
A=M-1
M=-1
(END.94)
// neg
@SP
A=M-1
M=!M
// program flow command
@SP
AM=M-1
D=M
@WHILE_END0
D;JNE
// push constant
@50
D=A
@SP
M=M+1
A=M-1
M=D
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(WHILE_EXP1)
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.95
D;JGT
@SP
A=M-1
M=0
@END.95
0;JMP
(TRUE.95)
@SP
A=M-1
M=-1
(END.95)
// neg
@SP
A=M-1
M=!M
// program flow command
@SP
AM=M-1
D=M
@WHILE_END1
D;JNE
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@WHILE_EXP1
0; JMP
// program flow command
(WHILE_END1)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop address
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@WHILE_EXP0
0; JMP
// program flow command
(WHILE_END0)
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Sys.error
// program flow command
(Sys.error)
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// call String.new 1 
@CallReturn.166
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0; JMP
(CallReturn.166)
// push constant
@69
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2 
@CallReturn.167
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0; JMP
(CallReturn.167)
// push constant
@82
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2 
@CallReturn.168
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0; JMP
(CallReturn.168)
// push constant
@82
D=A
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2 
@CallReturn.169
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0; JMP
(CallReturn.169)
// call Output.printString 1 
@CallReturn.170
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0; JMP
(CallReturn.170)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Output.printInt 1 
@CallReturn.171
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printInt
0; JMP
(CallReturn.171)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Sys.halt 0 
@CallReturn.172
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.halt
0; JMP
(CallReturn.172)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// Bootstrap Start
@261
D=A
@SP
M=D
@Sys.init
0;JMP
// Bootstrap End
// function: Output.init
// program flow command
(Output.init)
// push constant
@16384
D=A
@SP
M=M+1
A=M-1
M=D
// pop static
@Output.4
D=M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=!M
// pop static
@Output.2
D=M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@32
D=A
@SP
M=M+1
A=M-1
M=D
// pop static
@Output.1
D=M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop static
@Output.0
D=M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// call String.new 1 
@CallReturn.173
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0; JMP
(CallReturn.173)
// pop static
@Output.3
D=M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Output.initMap 0 
@CallReturn.174
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.initMap
0; JMP
(CallReturn.174)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call Output.createShiftedMap 0 
@CallReturn.175
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.createShiftedMap
0; JMP
(CallReturn.175)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Output.initMap
// program flow command
(Output.initMap)
// push constant
@127
D=A
@SP
M=M+1
A=M-1
M=D
// call Array.new 1 
@CallReturn.176
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0; JMP
(CallReturn.176)
// pop static
@Output.5
D=M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.177
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.177)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@32
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.178
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.178)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@33
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.179
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.179)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@34
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@54
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@54
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@20
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.180
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.180)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@35
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@18
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@18
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@18
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@18
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@18
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@18
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.181
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.181)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@36
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.182
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.182)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@37
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@35
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@49
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.183
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.183)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@38
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@54
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@54
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.184
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.184)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@39
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.185
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.185)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@40
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.186
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.186)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@41
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.187
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.187)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@42
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.188
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.188)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@43
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.189
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.189)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@44
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.190
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.190)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@45
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.191
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.191)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@46
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.192
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.192)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@47
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@32
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.193
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.193)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.194
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.194)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@49
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@14
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@15
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.195
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.195)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@50
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.196
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.196)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@28
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.197
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.197)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@52
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@16
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@28
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@26
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@25
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@60
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.198
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.198)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@53
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@31
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.199
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.199)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@54
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@28
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@31
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.200
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.200)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@55
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@49
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.201
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.201)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@56
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.202
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.202)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@57
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@62
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@14
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.203
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.203)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@58
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.204
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.204)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@59
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.205
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.205)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@60
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.206
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.206)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@61
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.207
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.207)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@62
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.208
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.208)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@64
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@59
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@59
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@59
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.209
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.209)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.210
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.210)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@65
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.211
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.211)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@66
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@31
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@31
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@31
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.212
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.212)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@67
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@28
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@54
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@35
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@35
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@54
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@28
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.213
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.213)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@68
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@15
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@15
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.214
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.214)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@69
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@35
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@11
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@15
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@11
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@35
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.215
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.215)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@70
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@35
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@11
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@15
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@11
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.216
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.216)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@71
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@28
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@54
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@35
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@59
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@54
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@44
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.217
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.217)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@72
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.218
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.218)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@73
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.219
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.219)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@74
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@60
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@14
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.220
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.220)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@75
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@15
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.221
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.221)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@76
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@35
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.222
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.222)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@77
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@33
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.223
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.223)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@78
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@55
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@55
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@59
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@59
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.224
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.224)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@79
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.225
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.225)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@80
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@31
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@31
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.226
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.226)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@81
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@59
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.227
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.227)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@82
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@31
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@31
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.228
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.228)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@83
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@28
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.229
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.229)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@84
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@45
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.230
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.230)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@85
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.231
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.231)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@86
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.232
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.232)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@87
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@18
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.233
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.233)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@88
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.234
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.234)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@89
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.235
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.235)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@90
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@49
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@35
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.236
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.236)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@91
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.237
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.237)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@92
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@32
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.238
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.238)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@93
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.239
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.239)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@94
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@8
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@28
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@54
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.240
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.240)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@95
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.241
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.241)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@96
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.242
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.242)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@97
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@14
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@54
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.243
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.243)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@98
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@15
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.244
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.244)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@99
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.245
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.245)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@100
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@60
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@54
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.246
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.246)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@101
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.247
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.247)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@102
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@28
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@54
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@38
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@15
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@15
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.248
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.248)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@103
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@62
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.249
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.249)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@104
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@55
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.250
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.250)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@105
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@14
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.251
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.251)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@106
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@56
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.252
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.252)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@107
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@15
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@15
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.253
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.253)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@108
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@14
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.254
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.254)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@109
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@29
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@43
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@43
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@43
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@43
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.255
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.255)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@110
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@29
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.256
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.256)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@111
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.257
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.257)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@112
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@31
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.258
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.258)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@113
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@62
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.259
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.259)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@114
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@29
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@55
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@7
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.260
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.260)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@115
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.261
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.261)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@116
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@4
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@15
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@54
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@28
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.262
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.262)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@117
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@54
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.263
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.263)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@118
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.264
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.264)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@119
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@18
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.265
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.265)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@120
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@30
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.266
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.266)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@121
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@62
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@24
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@15
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.267
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.267)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@122
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@27
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@51
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.268
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.268)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@123
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@56
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@7
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@56
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.269
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.269)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@124
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.270
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.270)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@125
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@7
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@56
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@12
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@7
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.271
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.271)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@126
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@38
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@45
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@25
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.create 12 
@CallReturn.272
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@17
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.create
0; JMP
(CallReturn.272)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Output.create
// program flow command
(Output.create)
// init LCL[0] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@11
D=A
@SP
M=M+1
A=M-1
M=D
// call Array.new 1 
@CallReturn.273
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0; JMP
(CallReturn.273)
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push static
@Output.5
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@ARG
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@ARG
D=M
@4
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@4
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@ARG
D=M
@5
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@5
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@ARG
D=M
@6
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@ARG
D=M
@7
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@7
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@ARG
D=M
@8
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@8
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@ARG
D=M
@9
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@9
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@ARG
D=M
@10
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@10
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@ARG
D=M
@11
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Output.createShiftedMap
// program flow command
(Output.createShiftedMap)
// init LCL[0] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[1] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[2] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[3] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@127
D=A
@SP
M=M+1
A=M-1
M=D
// call Array.new 1 
@CallReturn.274
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0; JMP
(CallReturn.274)
// pop static
@Output.6
D=M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop address
@LCL
D=M
@2
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(WHILE_EXP0)
// push from address
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@127
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.96
D;JLT
@SP
A=M-1
M=0
@END.96
0;JMP
(TRUE.96)
@SP
A=M-1
M=-1
(END.96)
// neg
@SP
A=M-1
M=!M
// program flow command
@SP
AM=M-1
D=M
@WHILE_END0
D;JNE
// push from address
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push static
@Output.5
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@11
D=A
@SP
M=M+1
A=M-1
M=D
// call Array.new 1 
@CallReturn.275
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0; JMP
(CallReturn.275)
// pop address
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push static
@Output.6
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop address
@LCL
D=M
@3
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(WHILE_EXP1)
// push from address
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@11
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.97
D;JLT
@SP
A=M-1
M=0
@END.97
0;JMP
(TRUE.97)
@SP
A=M-1
M=-1
(END.97)
// neg
@SP
A=M-1
M=!M
// program flow command
@SP
AM=M-1
D=M
@WHILE_END1
D;JNE
// push from address
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@256
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.multiply 2 
@CallReturn.276
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0; JMP
(CallReturn.276)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@LCL
D=M
@3
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@WHILE_EXP1
0; JMP
// program flow command
(WHILE_END1)
// push from address
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.98
D;JEQ
@SP
A=M-1
M=0
@END.98
0;JMP
(TRUE.98)
@SP
A=M-1
M=-1
(END.98)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// program flow command
@IF_FALSE0
0; JMP
// program flow command
(IF_TRUE0)
// push constant
@32
D=A
@SP
M=M+1
A=M-1
M=D
// pop address
@LCL
D=M
@2
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@IF_END0
0; JMP
// program flow command
(IF_FALSE0)
// push from address
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@LCL
D=M
@2
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_END0)
// program flow command
@WHILE_EXP0
0; JMP
// program flow command
(WHILE_END0)
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Output.getMap
// program flow command
(Output.getMap)
// init LCL[0] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@32
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.99
D;JLT
@SP
A=M-1
M=0
@END.99
0;JMP
(TRUE.99)
@SP
A=M-1
M=-1
(END.99)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@126
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.100
D;JGT
@SP
A=M-1
M=0
@END.100
0;JMP
(TRUE.100)
@SP
A=M-1
M=-1
(END.100)
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// program flow command
@IF_FALSE0
0; JMP
// program flow command
(IF_TRUE0)
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop address
@ARG
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE0)
// push static
@Output.2
D=M
@SP
M=M+1
A=M-1
M=D
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE1
D;JNE
// program flow command
@IF_FALSE1
0; JMP
// program flow command
(IF_TRUE1)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push static
@Output.5
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@IF_END1
0; JMP
// program flow command
(IF_FALSE1)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push static
@Output.6
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_END1)
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Output.drawChar
// program flow command
(Output.drawChar)
// init LCL[0] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[1] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[2] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[3] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Output.getMap 1 
@CallReturn.277
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.getMap
0; JMP
(CallReturn.277)
// pop address
@LCL
D=M
@2
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push static
@Output.1
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(WHILE_EXP0)
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@11
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.101
D;JLT
@SP
A=M-1
M=0
@END.101
0;JMP
(TRUE.101)
@SP
A=M-1
M=-1
(END.101)
// neg
@SP
A=M-1
M=!M
// program flow command
@SP
AM=M-1
D=M
@WHILE_END0
D;JNE
// push static
@Output.2
D=M
@SP
M=M+1
A=M-1
M=D
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// program flow command
@IF_FALSE0
0; JMP
// program flow command
(IF_TRUE0)
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push static
@Output.4
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@256
D=A
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=-M// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// pop address
@LCL
D=M
@3
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@IF_END0
0; JMP
// program flow command
(IF_FALSE0)
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push static
@Output.4
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@255
D=A
@SP
M=M+1
A=M-1
M=D
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// pop address
@LCL
D=M
@3
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_END0)
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push static
@Output.4
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@32
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@WHILE_EXP0
0; JMP
// program flow command
(WHILE_END0)
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Output.moveCursor
// program flow command
(Output.moveCursor)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.102
D;JLT
@SP
A=M-1
M=0
@END.102
0;JMP
(TRUE.102)
@SP
A=M-1
M=-1
(END.102)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@22
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.103
D;JGT
@SP
A=M-1
M=0
@END.103
0;JMP
(TRUE.103)
@SP
A=M-1
M=-1
(END.103)
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.104
D;JLT
@SP
A=M-1
M=0
@END.104
0;JMP
(TRUE.104)
@SP
A=M-1
M=-1
(END.104)
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@63
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.105
D;JGT
@SP
A=M-1
M=0
@END.105
0;JMP
(TRUE.105)
@SP
A=M-1
M=-1
(END.105)
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// program flow command
@IF_FALSE0
0; JMP
// program flow command
(IF_TRUE0)
// push constant
@20
D=A
@SP
M=M+1
A=M-1
M=D
// call Sys.error 1 
@CallReturn.278
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0; JMP
(CallReturn.278)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE0)
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.divide 2 
@CallReturn.279
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0; JMP
(CallReturn.279)
// pop static
@Output.0
D=M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@32
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@352
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.multiply 2 
@CallReturn.280
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0; JMP
(CallReturn.280)
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push static
@Output.0
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop static
@Output.1
D=M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push static
@Output.0
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.multiply 2 
@CallReturn.281
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0; JMP
(CallReturn.281)
//eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.106
D;JEQ
@SP
A=M-1
M=0
@END.106
0;JMP
(TRUE.106)
@SP
A=M-1
M=-1
(END.106)
// pop static
@Output.2
D=M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@32
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.drawChar 1 
@CallReturn.282
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.drawChar
0; JMP
(CallReturn.282)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Output.printChar
// program flow command
(Output.printChar)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call String.newLine 0 
@CallReturn.283
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.newLine
0; JMP
(CallReturn.283)
//eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.107
D;JEQ
@SP
A=M-1
M=0
@END.107
0;JMP
(TRUE.107)
@SP
A=M-1
M=-1
(END.107)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// program flow command
@IF_FALSE0
0; JMP
// program flow command
(IF_TRUE0)
// call Output.println 0 
@CallReturn.284
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.println
0; JMP
(CallReturn.284)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@IF_END0
0; JMP
// program flow command
(IF_FALSE0)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call String.backSpace 0 
@CallReturn.285
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.backSpace
0; JMP
(CallReturn.285)
//eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.108
D;JEQ
@SP
A=M-1
M=0
@END.108
0;JMP
(TRUE.108)
@SP
A=M-1
M=-1
(END.108)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE1
D;JNE
// program flow command
@IF_FALSE1
0; JMP
// program flow command
(IF_TRUE1)
// call Output.backSpace 0 
@CallReturn.286
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.backSpace
0; JMP
(CallReturn.286)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@IF_END1
0; JMP
// program flow command
(IF_FALSE1)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Output.drawChar 1 
@CallReturn.287
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.drawChar
0; JMP
(CallReturn.287)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push static
@Output.2
D=M
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=!M
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE2
D;JNE
// program flow command
@IF_FALSE2
0; JMP
// program flow command
(IF_TRUE2)
// push static
@Output.0
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop static
@Output.0
D=M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push static
@Output.1
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop static
@Output.1
D=M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE2)
// push static
@Output.0
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@32
D=A
@SP
M=M+1
A=M-1
M=D
//eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.109
D;JEQ
@SP
A=M-1
M=0
@END.109
0;JMP
(TRUE.109)
@SP
A=M-1
M=-1
(END.109)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE3
D;JNE
// program flow command
@IF_FALSE3
0; JMP
// program flow command
(IF_TRUE3)
// call Output.println 0 
@CallReturn.288
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.println
0; JMP
(CallReturn.288)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@IF_END3
0; JMP
// program flow command
(IF_FALSE3)
// push static
@Output.2
D=M
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=!M
// pop static
@Output.2
D=M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_END3)
// program flow command
(IF_END1)
// program flow command
(IF_END0)
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Output.printString
// program flow command
(Output.printString)
// init LCL[0] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[1] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call String.length 1 
@CallReturn.289
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.length
0; JMP
(CallReturn.289)
// pop address
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(WHILE_EXP0)
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.110
D;JLT
@SP
A=M-1
M=0
@END.110
0;JMP
(TRUE.110)
@SP
A=M-1
M=-1
(END.110)
// neg
@SP
A=M-1
M=!M
// program flow command
@SP
AM=M-1
D=M
@WHILE_END0
D;JNE
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call String.charAt 2 
@CallReturn.290
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.charAt
0; JMP
(CallReturn.290)
// call Output.printChar 1 
@CallReturn.291
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printChar
0; JMP
(CallReturn.291)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@WHILE_EXP0
0; JMP
// program flow command
(WHILE_END0)
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Output.printInt
// program flow command
(Output.printInt)
// push static
@Output.3
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call String.setInt 2 
@CallReturn.292
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.setInt
0; JMP
(CallReturn.292)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push static
@Output.3
D=M
@SP
M=M+1
A=M-1
M=D
// call Output.printString 1 
@CallReturn.293
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0; JMP
(CallReturn.293)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Output.println
// program flow command
(Output.println)
// push static
@Output.1
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@352
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push static
@Output.0
D=M
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop static
@Output.1
D=M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop static
@Output.0
D=M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=!M
// pop static
@Output.2
D=M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push static
@Output.1
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@8128
D=A
@SP
M=M+1
A=M-1
M=D
//eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.111
D;JEQ
@SP
A=M-1
M=0
@END.111
0;JMP
(TRUE.111)
@SP
A=M-1
M=-1
(END.111)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// program flow command
@IF_FALSE0
0; JMP
// program flow command
(IF_TRUE0)
// push constant
@32
D=A
@SP
M=M+1
A=M-1
M=D
// pop static
@Output.1
D=M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE0)
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Output.backSpace
// program flow command
(Output.backSpace)
// push static
@Output.2
D=M
@SP
M=M+1
A=M-1
M=D
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// program flow command
@IF_FALSE0
0; JMP
// program flow command
(IF_TRUE0)
// push static
@Output.0
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.112
D;JGT
@SP
A=M-1
M=0
@END.112
0;JMP
(TRUE.112)
@SP
A=M-1
M=-1
(END.112)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE1
D;JNE
// program flow command
@IF_FALSE1
0; JMP
// program flow command
(IF_TRUE1)
// push static
@Output.0
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop static
@Output.0
D=M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push static
@Output.1
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop static
@Output.1
D=M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@IF_END1
0; JMP
// program flow command
(IF_FALSE1)
// push constant
@31
D=A
@SP
M=M+1
A=M-1
M=D
// pop static
@Output.0
D=M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push static
@Output.1
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@32
D=A
@SP
M=M+1
A=M-1
M=D
//eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.113
D;JEQ
@SP
A=M-1
M=0
@END.113
0;JMP
(TRUE.113)
@SP
A=M-1
M=-1
(END.113)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE2
D;JNE
// program flow command
@IF_FALSE2
0; JMP
// program flow command
(IF_TRUE2)
// push constant
@8128
D=A
@SP
M=M+1
A=M-1
M=D
// pop static
@Output.1
D=M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE2)
// push static
@Output.1
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@321
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop static
@Output.1
D=M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_END1)
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop static
@Output.2
D=M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@IF_END0
0; JMP
// program flow command
(IF_FALSE0)
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=!M
// pop static
@Output.2
D=M
D=A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_END0)
// push constant
@32
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.drawChar 1 
@CallReturn.294
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.drawChar
0; JMP
(CallReturn.294)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// Bootstrap Start
@261
D=A
@SP
M=D
@Sys.init
0;JMP
// Bootstrap End
// function: String.new
// program flow command
(String.new)
// push constant
@3
D=A
@SP
M=M+1
A=M-1
M=D
// call Memory.alloc 1 
@CallReturn.295
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.alloc
0; JMP
(CallReturn.295)
// pop address
@THIS
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.114
D;JLT
@SP
A=M-1
M=0
@END.114
0;JMP
(TRUE.114)
@SP
A=M-1
M=-1
(END.114)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// program flow command
@IF_FALSE0
0; JMP
// program flow command
(IF_TRUE0)
// push constant
@14
D=A
@SP
M=M+1
A=M-1
M=D
// call Sys.error 1 
@CallReturn.296
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0; JMP
(CallReturn.296)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE0)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.115
D;JGT
@SP
A=M-1
M=0
@END.115
0;JMP
(TRUE.115)
@SP
A=M-1
M=-1
(END.115)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE1
D;JNE
// program flow command
@IF_FALSE1
0; JMP
// program flow command
(IF_TRUE1)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Array.new 1 
@CallReturn.297
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0; JMP
(CallReturn.297)
// pop address
@THIS
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE1)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THIS
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop address
@THIS
D=M
@2
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: String.dispose
// program flow command
(String.dispose)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THIS
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.116
D;JGT
@SP
A=M-1
M=0
@END.116
0;JMP
(TRUE.116)
@SP
A=M-1
M=-1
(END.116)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// program flow command
@IF_FALSE0
0; JMP
// program flow command
(IF_TRUE0)
// push from address
@THIS
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Array.dispose 1 
@CallReturn.298
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.dispose
0; JMP
(CallReturn.298)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE0)
// push from address
@THIS
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Memory.deAlloc 1 
@CallReturn.299
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0; JMP
(CallReturn.299)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: String.length
// program flow command
(String.length)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THIS
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: String.charAt
// program flow command
(String.charAt)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THIS
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.117
D;JLT
@SP
A=M-1
M=0
@END.117
0;JMP
(TRUE.117)
@SP
A=M-1
M=-1
(END.117)
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.118
D;JGT
@SP
A=M-1
M=0
@END.118
0;JMP
(TRUE.118)
@SP
A=M-1
M=-1
(END.118)
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.119
D;JEQ
@SP
A=M-1
M=0
@END.119
0;JMP
(TRUE.119)
@SP
A=M-1
M=-1
(END.119)
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// program flow command
@IF_FALSE0
0; JMP
// program flow command
(IF_TRUE0)
// push constant
@15
D=A
@SP
M=M+1
A=M-1
M=D
// call Sys.error 1 
@CallReturn.300
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0; JMP
(CallReturn.300)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE0)
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: String.setCharAt
// program flow command
(String.setCharAt)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THIS
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.120
D;JLT
@SP
A=M-1
M=0
@END.120
0;JMP
(TRUE.120)
@SP
A=M-1
M=-1
(END.120)
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.121
D;JGT
@SP
A=M-1
M=0
@END.121
0;JMP
(TRUE.121)
@SP
A=M-1
M=-1
(END.121)
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.122
D;JEQ
@SP
A=M-1
M=0
@END.122
0;JMP
(TRUE.122)
@SP
A=M-1
M=-1
(END.122)
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// program flow command
@IF_FALSE0
0; JMP
// program flow command
(IF_TRUE0)
// push constant
@16
D=A
@SP
M=M+1
A=M-1
M=D
// call Sys.error 1 
@CallReturn.301
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0; JMP
(CallReturn.301)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE0)
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@ARG
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: String.appendChar
// program flow command
(String.appendChar)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THIS
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.123
D;JEQ
@SP
A=M-1
M=0
@END.123
0;JMP
(TRUE.123)
@SP
A=M-1
M=-1
(END.123)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// program flow command
@IF_FALSE0
0; JMP
// program flow command
(IF_TRUE0)
// push constant
@17
D=A
@SP
M=M+1
A=M-1
M=D
// call Sys.error 1 
@CallReturn.302
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0; JMP
(CallReturn.302)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE0)
// push from address
@THIS
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=M
@2
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: String.eraseLastChar
// program flow command
(String.eraseLastChar)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THIS
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.124
D;JEQ
@SP
A=M-1
M=0
@END.124
0;JMP
(TRUE.124)
@SP
A=M-1
M=-1
(END.124)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// program flow command
@IF_FALSE0
0; JMP
// program flow command
(IF_TRUE0)
// push constant
@18
D=A
@SP
M=M+1
A=M-1
M=D
// call Sys.error 1 
@CallReturn.303
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0; JMP
(CallReturn.303)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE0)
// push from address
@THIS
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop address
@THIS
D=M
@2
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: String.intValue
// program flow command
(String.intValue)
// init LCL[0] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[1] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[2] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[3] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[4] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THIS
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.125
D;JEQ
@SP
A=M-1
M=0
@END.125
0;JMP
(TRUE.125)
@SP
A=M-1
M=-1
(END.125)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// program flow command
@IF_FALSE0
0; JMP
// program flow command
(IF_TRUE0)
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// program flow command
(IF_FALSE0)
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=!M
// pop address
@LCL
D=M
@3
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@45
D=A
@SP
M=M+1
A=M-1
M=D
//eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.126
D;JEQ
@SP
A=M-1
M=0
@END.126
0;JMP
(TRUE.126)
@SP
A=M-1
M=-1
(END.126)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE1
D;JNE
// program flow command
@IF_FALSE1
0; JMP
// program flow command
(IF_TRUE1)
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=!M
// pop address
@LCL
D=M
@4
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE1)
// program flow command
(WHILE_EXP0)
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.127
D;JLT
@SP
A=M-1
M=0
@END.127
0;JMP
(TRUE.127)
@SP
A=M-1
M=-1
(END.127)
// push from address
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// and
@SP
AM=M-1
D=M
A=A-1
M=M&D
// neg
@SP
A=M-1
M=!M
// program flow command
@SP
AM=M-1
D=M
@WHILE_END0
D;JNE
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// pop address
@LCL
D=M
@2
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.128
D;JLT
@SP
A=M-1
M=0
@END.128
0;JMP
(TRUE.128)
@SP
A=M-1
M=-1
(END.128)
// push from address
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@9
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.129
D;JGT
@SP
A=M-1
M=0
@END.129
0;JMP
(TRUE.129)
@SP
A=M-1
M=-1
(END.129)
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// neg
@SP
A=M-1
M=!M
// pop address
@LCL
D=M
@3
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE2
D;JNE
// program flow command
@IF_FALSE2
0; JMP
// program flow command
(IF_TRUE2)
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@10
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.multiply 2 
@CallReturn.304
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0; JMP
(CallReturn.304)
// push from address
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE2)
// program flow command
@WHILE_EXP0
0; JMP
// program flow command
(WHILE_END0)
// push from address
@LCL
D=M
@4
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE3
D;JNE
// program flow command
@IF_FALSE3
0; JMP
// program flow command
(IF_TRUE3)
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=-M// pop address
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE3)
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: String.setInt
// program flow command
(String.setInt)
// init LCL[0] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[1] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[2] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[3] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THIS
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.130
D;JEQ
@SP
A=M-1
M=0
@END.130
0;JMP
(TRUE.130)
@SP
A=M-1
M=-1
(END.130)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// program flow command
@IF_FALSE0
0; JMP
// program flow command
(IF_TRUE0)
// push constant
@19
D=A
@SP
M=M+1
A=M-1
M=D
// call Sys.error 1 
@CallReturn.305
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0; JMP
(CallReturn.305)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE0)
// push constant
@6
D=A
@SP
M=M+1
A=M-1
M=D
// call Array.new 1 
@CallReturn.306
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.new
0; JMP
(CallReturn.306)
// pop address
@LCL
D=M
@2
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.131
D;JLT
@SP
A=M-1
M=0
@END.131
0;JMP
(TRUE.131)
@SP
A=M-1
M=-1
(END.131)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE1
D;JNE
// program flow command
@IF_FALSE1
0; JMP
// program flow command
(IF_TRUE1)
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=!M
// pop address
@LCL
D=M
@3
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=-M// pop address
@ARG
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE1)
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(WHILE_EXP0)
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.132
D;JGT
@SP
A=M-1
M=0
@END.132
0;JMP
(TRUE.132)
@SP
A=M-1
M=-1
(END.132)
// neg
@SP
A=M-1
M=!M
// program flow command
@SP
AM=M-1
D=M
@WHILE_END0
D;JNE
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@10
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.divide 2 
@CallReturn.307
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.divide
0; JMP
(CallReturn.307)
// pop address
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@10
D=A
@SP
M=M+1
A=M-1
M=D
// call Math.multiply 2 
@CallReturn.308
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Math.multiply
0; JMP
(CallReturn.308)
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@ARG
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@WHILE_EXP0
0; JMP
// program flow command
(WHILE_END0)
// push from address
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE2
D;JNE
// program flow command
@IF_FALSE2
0; JMP
// program flow command
(IF_TRUE2)
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant
@45
D=A
@SP
M=M+1
A=M-1
M=D
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE2)
// push from address
@THIS
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.133
D;JLT
@SP
A=M-1
M=0
@END.133
0;JMP
(TRUE.133)
@SP
A=M-1
M=-1
(END.133)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE3
D;JNE
// program flow command
@IF_FALSE3
0; JMP
// program flow command
(IF_TRUE3)
// push constant
@19
D=A
@SP
M=M+1
A=M-1
M=D
// call Sys.error 1 
@CallReturn.309
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0; JMP
(CallReturn.309)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE3)
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.134
D;JEQ
@SP
A=M-1
M=0
@END.134
0;JMP
(TRUE.134)
@SP
A=M-1
M=-1
(END.134)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE4
D;JNE
// program flow command
@IF_FALSE4
0; JMP
// program flow command
(IF_TRUE4)
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push constant
@48
D=A
@SP
M=M+1
A=M-1
M=D
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// pop address
@THIS
D=M
@2
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@IF_END4
0; JMP
// program flow command
(IF_FALSE4)
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// pop address
@THIS
D=M
@2
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(WHILE_EXP1)
// push from address
@THIS
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//lt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.135
D;JLT
@SP
A=M-1
M=0
@END.135
0;JMP
(TRUE.135)
@SP
A=M-1
M=-1
(END.135)
// neg
@SP
A=M-1
M=!M
// program flow command
@SP
AM=M-1
D=M
@WHILE_END1
D;JNE
// push from address
@THIS
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@THIS
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// sub
@SP
AM=M-1
D=M
A=A-1
M=M-D
// push from address
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THAT
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// pop address
@THIS
D=A
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@R5
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THAT
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@1
D=A
@SP
M=M+1
A=M-1
M=D
// add
@SP
AM=M-1
D=M
A=A-1
M=M+D
// pop address
@THIS
D=M
@2
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@WHILE_EXP1
0; JMP
// program flow command
(WHILE_END1)
// program flow command
(IF_END4)
// push from address
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Array.dispose 1 
@CallReturn.310
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Array.dispose
0; JMP
(CallReturn.310)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: String.newLine
// program flow command
(String.newLine)
// push constant
@128
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: String.backSpace
// program flow command
(String.backSpace)
// push constant
@129
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: String.doubleQuote
// program flow command
(String.doubleQuote)
// push constant
@34
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// Bootstrap Start
@261
D=A
@SP
M=D
@Sys.init
0;JMP
// Bootstrap End
// function: Array.new
// program flow command
(Array.new)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.136
D;JGT
@SP
A=M-1
M=0
@END.136
0;JMP
(TRUE.136)
@SP
A=M-1
M=-1
(END.136)
// neg
@SP
A=M-1
M=!M
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// program flow command
@IF_FALSE0
0; JMP
// program flow command
(IF_TRUE0)
// push constant
@2
D=A
@SP
M=M+1
A=M-1
M=D
// call Sys.error 1 
@CallReturn.311
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.error
0; JMP
(CallReturn.311)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE0)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Memory.alloc 1 
@CallReturn.312
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.alloc
0; JMP
(CallReturn.312)
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Array.dispose
// program flow command
(Array.dispose)
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@THIS
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@THIS
D=A
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Memory.deAlloc 1 
@CallReturn.313
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.deAlloc
0; JMP
(CallReturn.313)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// Bootstrap Start
@261
D=A
@SP
M=D
@Sys.init
0;JMP
// Bootstrap End
// function: Keyboard.init
// program flow command
(Keyboard.init)
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Keyboard.keyPressed
// program flow command
(Keyboard.keyPressed)
// push constant
@24576
D=A
@SP
M=M+1
A=M-1
M=D
// call Memory.peek 1 
@CallReturn.314
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Memory.peek
0; JMP
(CallReturn.314)
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Keyboard.readChar
// program flow command
(Keyboard.readChar)
// init LCL[0] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[1] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
// call Output.printChar 1 
@CallReturn.315
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printChar
0; JMP
(CallReturn.315)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(WHILE_EXP0)
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.137
D;JEQ
@SP
A=M-1
M=0
@END.137
0;JMP
(TRUE.137)
@SP
A=M-1
M=-1
(END.137)
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.138
D;JGT
@SP
A=M-1
M=0
@END.138
0;JMP
(TRUE.138)
@SP
A=M-1
M=-1
(END.138)
// or
@SP
AM=M-1
D=M
A=A-1
M=M|D
// neg
@SP
A=M-1
M=!M
// program flow command
@SP
AM=M-1
D=M
@WHILE_END0
D;JNE
// call Keyboard.keyPressed 0 
@CallReturn.316
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Keyboard.keyPressed
0; JMP
(CallReturn.316)
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push constant
@0
D=A
@SP
M=M+1
A=M-1
M=D
//gt
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.139
D;JGT
@SP
A=M-1
M=0
@END.139
0;JMP
(TRUE.139)
@SP
A=M-1
M=-1
(END.139)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// program flow command
@IF_FALSE0
0; JMP
// program flow command
(IF_TRUE0)
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// pop address
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_FALSE0)
// program flow command
@WHILE_EXP0
0; JMP
// program flow command
(WHILE_END0)
// call String.backSpace 0 
@CallReturn.317
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.backSpace
0; JMP
(CallReturn.317)
// call Output.printChar 1 
@CallReturn.318
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printChar
0; JMP
(CallReturn.318)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Output.printChar 1 
@CallReturn.319
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printChar
0; JMP
(CallReturn.319)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Keyboard.readLine
// program flow command
(Keyboard.readLine)
// init LCL[0] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[1] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[2] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[3] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[4] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push constant
@80
D=A
@SP
M=M+1
A=M-1
M=D
// call String.new 1 
@CallReturn.320
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.new
0; JMP
(CallReturn.320)
// pop address
@LCL
D=M
@3
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Output.printString 1 
@CallReturn.321
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Output.printString
0; JMP
(CallReturn.321)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call String.newLine 0 
@CallReturn.322
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.newLine
0; JMP
(CallReturn.322)
// pop address
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// call String.backSpace 0 
@CallReturn.323
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.backSpace
0; JMP
(CallReturn.323)
// pop address
@LCL
D=M
@2
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(WHILE_EXP0)
// push from address
@LCL
D=M
@4
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=!M
// neg
@SP
A=M-1
M=!M
// program flow command
@SP
AM=M-1
D=M
@WHILE_END0
D;JNE
// call Keyboard.readChar 0 
@CallReturn.324
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Keyboard.readChar
0; JMP
(CallReturn.324)
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.140
D;JEQ
@SP
A=M-1
M=0
@END.140
0;JMP
(TRUE.140)
@SP
A=M-1
M=-1
(END.140)
// pop address
@LCL
D=M
@4
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@4
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// neg
@SP
A=M-1
M=!M
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE0
D;JNE
// program flow command
@IF_FALSE0
0; JMP
// program flow command
(IF_TRUE0)
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@2
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
//eq
@SP
AM=M-1
D=M
A=A-1
D=M-D
@TRUE.141
D;JEQ
@SP
A=M-1
M=0
@END.141
0;JMP
(TRUE.141)
@SP
A=M-1
M=-1
(END.141)
// program flow command
@SP
AM=M-1
D=M
@IF_TRUE1
D;JNE
// program flow command
@IF_FALSE1
0; JMP
// program flow command
(IF_TRUE1)
// push from address
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call String.eraseLastChar 1 
@CallReturn.325
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.eraseLastChar
0; JMP
(CallReturn.325)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
@IF_END1
0; JMP
// program flow command
(IF_FALSE1)
// push from address
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call String.appendChar 2 
@CallReturn.326
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.appendChar
0; JMP
(CallReturn.326)
// pop address
@LCL
D=M
@3
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// program flow command
(IF_END1)
// program flow command
(IF_FALSE0)
// program flow command
@WHILE_EXP0
0; JMP
// program flow command
(WHILE_END0)
// push from address
@LCL
D=M
@3
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
// function: Keyboard.readInt
// program flow command
(Keyboard.readInt)
// init LCL[0] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// init LCL[1] to 0
@0
D=A
@SP
M=M+1
A=M-1
M=D
// push from address
@ARG
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call Keyboard.readLine 1 
@CallReturn.327
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Keyboard.readLine
0; JMP
(CallReturn.327)
// pop address
@LCL
D=M
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call String.intValue 1 
@CallReturn.328
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.intValue
0; JMP
(CallReturn.328)
// pop address
@LCL
D=M
@1
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@0
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// call String.dispose 1 
@CallReturn.329
D=A
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@String.dispose
0; JMP
(CallReturn.329)
// pop address
@R5
D=A
@0
D=D+A
@R13
M=D
@SP
AM=M-1
D=M
@R13
A=M
M=D
// push from address
@LCL
D=M
@1
A=D+A
D=M
@SP
M=M+1
A=M-1
M=D
// return
@LCL
D=M
@R14
M=D
@R14
D=M
@5
A=D-A
D=M
@R13
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
@ARG
D=M
@SP
M=D+1
@R14
D=M
@1
A=D-A
D=M
@THAT
M=D
@R14
D=M
@2
A=D-A
D=M
@THIS
M=D
@R14
D=M
@3
A=D-A
D=M
@ARG
M=D
@R14
D=M
@4
A=D-A
D=M
@LCL
M=D
@R13
A=M
0; JMP
